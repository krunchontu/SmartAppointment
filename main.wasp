app SmartAppointments {
  wasp: {
    version: "^0.11.4"
  },
  title: "SmartAppointments",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id          Int       @id @default(autoincrement())
    username    String    @unique
    password    String
    profession  String
    contactInfo String
    services    Service[]
psl=}

entity Service {=psl
    id             Int           @id @default(autoincrement())
    serviceName    String
    serviceDetails String
    user           User          @relation(fields: [userId], references: [id])
    userId         Int
    appointments   Appointment[]
psl=}

entity Appointment {=psl
    id              Int     @id @default(autoincrement())
    dateTime        String
    status          String  @default("Pending")
    customerName    String
    customerEmail   String
    customerContact String
    comments        String
    service         Service @relation(fields: [serviceId], references: [id])
    serviceId       Int
psl=}

action registerUser {
  fn: import { registerUser } from "@server/actions.js",
  entities: [User]
}

action addService {
  fn: import { addService } from "@server/actions.js",
  entities: [Service]
}

action bookAppointment {
  fn: import { bookAppointment } from "@server/actions.js",
  entities: [Appointment]
}

action updateAppointment {
  fn: import { updateAppointment } from "@server/actions.js",
  entities: [Appointment]
}

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User]
}

query getServices {
  fn: import { getServices } from "@server/queries.js",
  entities: [Service]
}

query getAppointment {
  fn: import { getAppointment } from "@server/queries.js",
  entities: [Appointment]
}

query getAppointmentsByService {
  fn: import { getAppointmentsByService } from "@server/queries.js",
  entities: [Appointment]
}

route DashboardRoute { path: "/", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/DashboardPage.jsx",
  authRequired: true
}

route ServiceRoute { path: "/service/:serviceId", to: ServicePage }
page ServicePage {
  component: import { Service } from "@client/pages/Service.jsx",
  authRequired: true
}

route AppointmentRoute { path: "/appointment/:appointmentId", to: AppointmentPage }
page AppointmentPage {
  component: import { AppointmentPage } from "@client/pages/Appointment.jsx",
  authRequired: true
}
